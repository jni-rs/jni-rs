#![warn(missing_docs)]
#![allow(clippy::upper_case_acronyms)]
// TODO: https://github.com/jni-rs/jni-rs/issues/348
#![allow(clippy::not_unsafe_ptr_arg_deref)]

//! # Safe JNI Bindings in Rust
//!
//! This crate provides a (mostly) safe way to implement methods in Java using
//! the JNI. Because who wants to *actually* write Java?
//!
//! ## Getting Started
//!
//! Naturally, any ffi-related project is going to require some code in both
//! languages that we're trying to make communicate. Java requires all native
//! methods to adhere to the Java Native Interface (JNI), so we first have to
//! define our function signature from Java, and then we can write Rust that
//! will adhere to it.
//!
//! ### The Java side
//!
//! First, you need a Java class definition. `HelloWorld.java`:
//!
//! ```java
//! class HelloWorld {
//!     // This declares that the static `hello` method will be provided
//!     // a native library.
//!     private static native String hello(String input);
//!
//!     static {
//!         // This actually loads the shared object that we'll be creating.
//!         // The actual location of the .so or .dll may differ based on your
//!         // platform.
//!         System.loadLibrary("mylib");
//!     }
//!
//!     // The rest is just regular ol' Java!
//!     public static void main(String[] args) {
//!         String output = HelloWorld.hello("josh");
//!         System.out.println(output);
//!     }
//! }
//! ```
//!
//! Compile this to a class file with `javac HelloWorld.java`.
//!
//! Trying to run it now will give us the error `Exception in thread "main"
//! java.lang.UnsatisfiedLinkError: no mylib in java.library.path` since we
//! haven't written our native code yet.
//!
//! To do that, first we need the name and type signature that our Rust function
//! needs to adhere to. Luckily, the Java compiler can generate that for you!
//! Run `javac -h . HelloWorld.java` and you'll get a `HelloWorld.h` output to your
//! directory. It should look something like this:
//!
//! ```c
//! /* DO NOT EDIT THIS FILE - it is machine generated */
//! #include <jni.h>
//! /* Header for class HelloWorld */
//!
//! #ifndef _Included_HelloWorld
//! #define _Included_HelloWorld
//! #ifdef __cplusplus
//! extern "C" {
//! #endif
//! /*
//!  * Class:     HelloWorld
//!  * Method:    hello
//!  * Signature: (Ljava/lang/String;)Ljava/lang/String;
//!  */
//! JNIEXPORT jstring JNICALL Java_HelloWorld_hello
//!   (Env *, jclass, jstring);
//!
//! #ifdef __cplusplus
//! }
//! #endif
//! #endif
//! ```
//!
//! It's a C header, but luckily for us, the types will mostly match up. Let's
//! make our crate that's going to compile to our native library.
//!
//! ### The Rust side
//!
//! Create your crate with `cargo new mylib`. This will create a directory
//! `mylib` that has everything needed to build a basic crate with `cargo`. We
//! need to make a couple of changes to `Cargo.toml` before we do anything else.
//!
//! * Under `[dependencies]`, add `jni = "0.21.1"`
//! * Add a new `[lib]` section and under it, `crate_type = ["cdylib"]`.
//!
//! Now, if you run `cargo build` from inside the crate directory, you should
//! see a `libmylib.so` (if you're on Linux) or a `libmylib.dylib` (if you are on macOS) in the `target/debug`
//! directory.
//!
//! The last thing we need to do is to define our exported method. Add this to
//! your crate's `src/lib.rs`:
//!
//! ```rust,no_run
//! // As we are going to implement a native method in Rust, the JVM is going
//! // to pass us a [`jni::sys::JNIEnv`] pointer that implicitly represents
//! // an attachment of the current thread to the Java VM.
//! //
//! // This is an FFI-safe type that lets us capture the pointer and also
//! // associate it with the caller's JNI stack frame with a lifetime.
//! use jni::EnvUnowned;
//!
//! // This is the interface to the JVM that we'll call the majority of our
//! // methods on.
//! use jni::Env;
//!
//! // These objects are what you should use as arguments to your native
//! // function. They carry extra lifetime information to prevent them escaping
//! // this context and getting used after being GC'd.
//! use jni::objects::{JClass, JString};
//!
//! // This type represents an owned, JNI-compatible string.
//! use jni::strings::JNIString;
//!
//! // This keeps Rust from "mangling" the name and making it unique for this
//! // crate.
//! #[no_mangle]
//! pub extern "system" fn Java_HelloWorld_hello<'caller>(mut unowned_env: EnvUnowned<'caller>,
//! // This is the class that owns our static method. It's not going to be used,
//! // but still must be present to match the expected signature of a static
//! // native method.
//!                                                      class: JClass<'caller>,
//!                                                      input: JString<'caller>)
//!                                                      -> JString<'caller> {
//!     // Before we can access JNI, jni-rs needs to know that the thread is
//!     // attached to the Java VM.
//!     //
//!     // Within a native method we we can assume the JVM attaches the thread
//!     // before calling our implementation, and this is represented
//!     // by the EnvUnowned type.
//!     //
//!     // We upgrade the EnvUnowned to a Env, which gives us access to
//!     // the full JNI API.
//!     //
//!     // Internally this creates a hidden AttachGuard to track the thread attachment
//!     // explicitly and this will also wrap the given closure with `catch_unwind`
//!     // to ensure that your code can't panic and unwind across FFI boundaries.
//!     unowned_env.with_env(|env| -> Result<_, jni::errors::Error> {
//!         // First, we have to get the string out of Java. Check out the `strings`
//!         // module for more info on how this works.
//!         let input: String =
//!             env.get_string(&input).expect("Couldn't get java string!").into();
//!         // Then we have to create a new Java string to return. Again, more info
//!         // in the `strings` module.
//!         let output = env.new_string(JNIString::from(format!("Hello, {}!", input)))
//!             .expect("Couldn't create java string!");
//!         Ok(output)
//!     }).unwrap_or_else(|err| {
//!         eprintln!("Error occurred: {}", err);
//!         Default::default()
//!     })
//! }
//! ```
//!
//! Note that the type signature for our function is almost identical to the one
//! from the generated header, aside from our lifetime-carrying arguments.
//!
//! ### Final steps
//!
//! That's it! Build your crate and try to run your Java class again.
//!
//! ... Same error as before you say? Well that's because JVM is looking for
//! `mylib` in all the wrong places. This will differ by platform thanks to
//! different linker/loader semantics, but on Linux, you can simply `export
//! LD_LIBRARY_PATH=/path/to/mylib/target/debug`. Now, you should get the
//! expected output `Hello, josh!` from your Java class.
//!
//! ## Launching JVM from Rust
//!
//! It is possible to launch a JVM from a native process using the [Invocation API], provided
//! by [`JavaVM`](struct.JavaVM.html).
//!
//! ## See Also
//!
//! ### Examples
//! - [Example project][jni-rs-example]
//! - Our [integration tests][jni-rs-its] and [benchmarks][jni-rs-benches]
//!
//! ### JNI Documentation
//! - [Java Native Interface Specification][jni-spec]
//! - [JNI tips][jni-tips] — general tips on JNI development and some Android-specific
//!
//! ### Open-Source Users
//! - The Servo browser engine Android [port][users-servo]
//! - The Exonum framework [Java Binding][users-ejb]
//! - MaidSafe [Java Binding][users-maidsafe]
//!
//! ### Other Projects Simplifying Java and Rust Communication
//! - Consider [JNR][projects-jnr] if you just need to use a native library with C interface
//! - Watch OpenJDK [Project Panama][projects-panama] which aims to enable using native libraries
//!   with no JNI code
//! - Consider [GraalVM][projects-graalvm] — a recently released VM that gives zero-cost
//!   interoperability between various languages (including Java and [Rust][graalvm-rust] compiled
//!   into LLVM-bitcode)
//! - See a [plugin](https://github.com/questdb/rust-maven-plugin/) for invoking cargo from Java Maven builds
//!
//! [Invocation API]: https://docs.oracle.com/en/java/javase/11/docs/specs/jni/invocation.html
//! [jni-spec]: https://docs.oracle.com/en/java/javase/11/docs/specs/jni/index.html
//! [jni-tips]: https://developer.android.com/training/articles/perf-jni
//! [jni-rs-example]: https://github.com/jni-rs/jni-rs/tree/master/example
//! [jni-rs-its]: https://github.com/jni-rs/jni-rs/tree/master/tests
//! [jni-rs-benches]: https://github.com/jni-rs/jni-rs/tree/master/benches
//! [users-servo]: https://github.com/servo/servo/tree/master/ports/libsimpleservo
//! [users-ejb]: https://github.com/exonum/exonum-java-binding/tree/master/exonum-java-binding/core/rust
//! [users-maidsafe]: https://github.com/maidsafe/safe_client_libs/tree/master/safe_app_jni
//! [projects-jnr]: https://github.com/jnr/jnr-ffi/
//! [projects-graalvm]: http://www.graalvm.org/docs/why-graal/#for-java-programs
//! [graalvm-rust]: http://www.graalvm.org/docs/reference-manual/languages/llvm/#running-rust
//! [projects-panama]: https://jdk.java.net/panama/

/// `jni-sys` re-exports
pub mod sys;

mod wrapper {
    mod version;
    pub use self::version::*;

    #[macro_use]
    mod macros;

    /// Errors. Do you really need more explanation?
    pub mod errors;

    /// Descriptors for classes and method IDs.
    pub mod descriptors;

    /// Parser for java type signatures.
    pub mod signature;

    /// Wrappers for object pointers returned from the JVM.
    pub mod objects;

    /// Handling of strings in Java's [modified UTF-8] encoding, including
    /// conversion to and from Rust strings (which use standard UTF-8).
    ///
    /// [modified UTF-8]: https://en.wikipedia.org/wiki/UTF-8#Modified_UTF-8
    pub mod strings;

    mod jnienv;
    pub use jnienv::*;

    // TODO: rename mod jnienv to mod env
    /// Bindings for the `Env` APIs
    #[allow(unused)]
    pub(crate) mod env {
        pub use super::jnienv::{Env, EnvUnowned};
    }

    #[deprecated(
        since = "0.22.0",
        note = r#"Since 0.22, `JNIEnv` (renamed `Env`) is not an FFI safe pointer wrapper any more.

To remain safe by default, `jni::JNIEnv` is now an alias for `EnvUnowned` (which is FFI safe).

Use `EnvUnowned` to capture a raw `jni_sys::JNIEnv` pointer in native methods, like:
`pub extern "system" fn Java_HelloWorld_hello<'frame>(unowned_env: EnvUnowned<'frame>, ...)`
Then use `unowned_env.with_env()` to upgrade it to an `Env` reference.

Most of the time you should temporarily acquire a `Env` reference using:
- `JavaVM::attach_current_thread` (preferred) or `JavaVM::attach_current_thread_for_scope`
- `JavaVM::with_env` (if certain that the thread is already attached)
- `UnownedEnv::with_env()` in native methods

When migrating to 0.22, if you have a mixture of FFI/non-FFI usage of JNIEnv then err on the side
of renaming `JNIEnv` to `EnvUnowned` because that's safe for FFI and for non-FFI usage there will be
clear compiler errors if trying to access the real `Env` API through the `EnvUnowned` type.
"#
    )]
    /// An FFI safe alias for `EnvUnowned` for (safer) compatibility with
    /// existing code.
    ///
    /// Since 0.22 ([#570](https://github.com/jni-rs/jni-rs/pull/570)) the
    /// `JNIEnv` type was renamed to [Env], which is no longer an FFI safe
    /// pointer wrapper.
    ///
    /// FFI usage of `JNIEnv`, within native method arguments, should be
    /// migrated to [EnvUnowned], followed by [`EnvUnowned::with_env`].
    ///
    /// To help make this clear and sign post how to safely migrate to the [Env]
    /// and [EnvUnowned] types, we export this deprecated alias with a warning.
    pub type JNIEnv<'frame> = super::EnvUnowned<'frame>;

    /// Java VM interface.
    mod java_vm;
    pub use self::java_vm::*;
}

pub use wrapper::*;
